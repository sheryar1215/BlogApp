"use strict";

var _AdapterLoader = _interopRequireDefault(require("../AdapterLoader"));
var _node = _interopRequireDefault(require("parse/node"));
var _AuthAdapter = _interopRequireDefault(require("./AuthAdapter"));
var _gcenter = _interopRequireDefault(require("./gcenter"));
var _github = _interopRequireDefault(require("./github"));
var _gpgames = _interopRequireDefault(require("./gpgames"));
var _instagram = _interopRequireDefault(require("./instagram"));
var _line = _interopRequireDefault(require("./line"));
var _linkedin = _interopRequireDefault(require("./linkedin"));
var _mfa = _interopRequireDefault(require("./mfa"));
var _microsoft = _interopRequireDefault(require("./microsoft"));
var _oauth = _interopRequireDefault(require("./oauth2"));
var _qq = _interopRequireDefault(require("./qq"));
var _spotify = _interopRequireDefault(require("./spotify"));
var _twitter = _interopRequireDefault(require("./twitter"));
var _wechat = _interopRequireDefault(require("./wechat"));
var _weibo = _interopRequireDefault(require("./weibo"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const apple = require('./apple');
const digits = require('./twitter'); // digits tokens are validated by twitter
const facebook = require('./facebook');
const google = require('./google');
const janraincapture = require('./janraincapture');
const janrainengage = require('./janrainengage');
const keycloak = require('./keycloak');
const ldap = require('./ldap');
const meetup = require('./meetup');
const phantauth = require('./phantauth');
const vkontakte = require('./vkontakte');
const anonymous = {
  validateAuthData: () => {
    return Promise.resolve();
  },
  validateAppId: () => {
    return Promise.resolve();
  }
};
const providers = {
  apple,
  gcenter: _gcenter.default,
  gpgames: _gpgames.default,
  facebook,
  instagram: _instagram.default,
  linkedin: _linkedin.default,
  meetup,
  mfa: _mfa.default,
  google,
  github: _github.default,
  twitter: _twitter.default,
  spotify: _spotify.default,
  anonymous,
  digits,
  janrainengage,
  janraincapture,
  line: _line.default,
  vkontakte,
  qq: _qq.default,
  wechat: _wechat.default,
  weibo: _weibo.default,
  phantauth,
  microsoft: _microsoft.default,
  keycloak,
  ldap
};

// Indexed auth policies
const authAdapterPolicies = {
  default: true,
  solo: true,
  additional: true
};
function authDataValidator(provider, adapter, appIds, options) {
  return async function (authData, req, user, requestObject) {
    if (appIds && typeof adapter.validateAppId === 'function') {
      await Promise.resolve(adapter.validateAppId(appIds, authData, options, requestObject));
    }
    if (adapter.policy && !authAdapterPolicies[adapter.policy] && typeof adapter.policy !== 'function') {
      throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'AuthAdapter policy is not configured correctly. The value must be either "solo", "additional", "default" or undefined (will be handled as "default")');
    }
    if (typeof adapter.validateAuthData === 'function') {
      return adapter.validateAuthData(authData, options, requestObject);
    }
    if (typeof adapter.validateSetUp !== 'function' || typeof adapter.validateLogin !== 'function' || typeof adapter.validateUpdate !== 'function') {
      throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Adapter is not configured. Implement either validateAuthData or all of the following: validateSetUp, validateLogin and validateUpdate');
    }
    // When masterKey is detected, we should trigger a logged in user
    const isLoggedIn = req.auth.user && user && req.auth.user.id === user.id || user && req.auth.isMaster;
    let hasAuthDataConfigured = false;
    if (user && user.get('authData') && user.get('authData')[provider]) {
      hasAuthDataConfigured = true;
    }
    if (isLoggedIn) {
      // User is updating their authData
      if (hasAuthDataConfigured) {
        return {
          method: 'validateUpdate',
          validator: () => adapter.validateUpdate(authData, options, requestObject)
        };
      }
      // Set up if the user does not have the provider configured
      return {
        method: 'validateSetUp',
        validator: () => adapter.validateSetUp(authData, options, requestObject)
      };
    }

    // Not logged in and authData is configured on the user
    if (hasAuthDataConfigured) {
      return {
        method: 'validateLogin',
        validator: () => adapter.validateLogin(authData, options, requestObject)
      };
    }

    // User not logged in and the provider is not set up, for example when a new user
    // signs up or an existing user uses a new auth provider
    return {
      method: 'validateSetUp',
      validator: () => adapter.validateSetUp(authData, options, requestObject)
    };
  };
}
function loadAuthAdapter(provider, authOptions) {
  // providers are auth providers implemented by default
  let defaultAdapter = providers[provider];
  // authOptions can contain complete custom auth adapters or
  // a default auth adapter like Facebook
  const providerOptions = authOptions[provider];
  if (providerOptions && Object.prototype.hasOwnProperty.call(providerOptions, 'oauth2') && providerOptions['oauth2'] === true) {
    defaultAdapter = _oauth.default;
  }

  // Default provider not found and a custom auth provider was not provided
  if (!defaultAdapter && !providerOptions) {
    return;
  }
  const adapter = defaultAdapter instanceof _AuthAdapter.default ? defaultAdapter : Object.assign({}, defaultAdapter);
  const keys = ['validateAuthData', 'validateAppId', 'validateSetUp', 'validateLogin', 'validateUpdate', 'challenge', 'validateOptions', 'policy', 'afterFind'];
  const defaultAuthAdapter = new _AuthAdapter.default();
  keys.forEach(key => {
    const existing = adapter?.[key];
    if (existing && typeof existing === 'function' && existing.toString() === defaultAuthAdapter[key].toString()) {
      adapter[key] = null;
    }
  });
  const appIds = providerOptions ? providerOptions.appIds : undefined;

  // Try the configuration methods
  if (providerOptions) {
    const optionalAdapter = (0, _AdapterLoader.default)(providerOptions, undefined, providerOptions);
    if (optionalAdapter) {
      keys.forEach(key => {
        if (optionalAdapter[key]) {
          adapter[key] = optionalAdapter[key];
        }
      });
    }
  }
  if (adapter.validateOptions) {
    adapter.validateOptions(providerOptions);
  }
  return {
    adapter,
    appIds,
    providerOptions
  };
}
module.exports = function (authOptions = {}, enableAnonymousUsers = true) {
  let _enableAnonymousUsers = enableAnonymousUsers;
  const setEnableAnonymousUsers = function (enable) {
    _enableAnonymousUsers = enable;
  };
  // To handle the test cases on configuration
  const getValidatorForProvider = function (provider) {
    if (provider === 'anonymous' && !_enableAnonymousUsers) {
      return {
        validator: undefined
      };
    }
    const authAdapter = loadAuthAdapter(provider, authOptions);
    if (!authAdapter) {
      return;
    }
    const {
      adapter,
      appIds,
      providerOptions
    } = authAdapter;
    return {
      validator: authDataValidator(provider, adapter, appIds, providerOptions),
      adapter
    };
  };
  const runAfterFind = async (req, authData) => {
    if (!authData) {
      return;
    }
    const adapters = Object.keys(authData);
    await Promise.all(adapters.map(async provider => {
      const authAdapter = getValidatorForProvider(provider);
      if (!authAdapter) {
        return;
      }
      const {
        adapter,
        providerOptions
      } = authAdapter;
      const afterFind = adapter.afterFind;
      if (afterFind && typeof afterFind === 'function') {
        const requestObject = {
          ip: req.config.ip,
          user: req.auth.user,
          master: req.auth.isMaster
        };
        const result = afterFind.call(adapter, authData[provider], providerOptions, requestObject);
        if (result) {
          authData[provider] = result;
        }
      }
    }));
  };
  return Object.freeze({
    getValidatorForProvider,
    setEnableAnonymousUsers,
    runAfterFind
  });
};
module.exports.loadAuthAdapter = loadAuthAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
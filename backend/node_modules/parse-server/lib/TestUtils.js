"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Connections = void 0;
exports.destroyAllDataPermanently = destroyAllDataPermanently;
exports.getConnectionsCount = getConnectionsCount;
exports.resolvingPromise = resolvingPromise;
exports.sleep = sleep;
var _cache = _interopRequireDefault(require("./cache"));
var _SchemaCache = _interopRequireDefault(require("./Adapters/Cache/SchemaCache"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Destroys all data in the database
 * @param {boolean} fast set to true if it's ok to just drop objects and not indexes.
 */
function destroyAllDataPermanently(fast) {
  if (!process.env.TESTING) {
    throw 'Only supported in test environment';
  }
  return Promise.all(Object.keys(_cache.default.cache).map(appId => {
    const app = _cache.default.get(appId);
    const deletePromises = [];
    if (app.cacheAdapter && app.cacheAdapter.clear) {
      deletePromises.push(app.cacheAdapter.clear());
    }
    if (app.databaseController) {
      deletePromises.push(app.databaseController.deleteEverything(fast));
    } else if (app.databaseAdapter) {
      _SchemaCache.default.clear();
      deletePromises.push(app.databaseAdapter.deleteAllClasses(fast));
    }
    return Promise.all(deletePromises);
  }));
}
function resolvingPromise() {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
function getConnectionsCount(server) {
  return new Promise((resolve, reject) => {
    server.getConnections((err, count) => {
      /* istanbul ignore next */
      if (err) {
        reject(err);
      } else {
        resolve(count);
      }
    });
  });
}
;
class Connections {
  constructor() {
    this.sockets = new Set();
  }
  track(server) {
    server.on('connection', socket => {
      this.sockets.add(socket);
      socket.on('close', () => {
        this.sockets.delete(socket);
      });
    });
  }
  destroyAll() {
    for (const socket of this.sockets.values()) {
      socket.destroy();
    }
    this.sockets.clear();
  }
  count() {
    return this.sockets.size;
  }
}
exports.Connections = Connections;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2FjaGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9TY2hlbWFDYWNoZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlc3Ryb3lBbGxEYXRhUGVybWFuZW50bHkiLCJmYXN0IiwicHJvY2VzcyIsImVudiIsIlRFU1RJTkciLCJQcm9taXNlIiwiYWxsIiwiT2JqZWN0Iiwia2V5cyIsIkFwcENhY2hlIiwiY2FjaGUiLCJtYXAiLCJhcHBJZCIsImFwcCIsImdldCIsImRlbGV0ZVByb21pc2VzIiwiY2FjaGVBZGFwdGVyIiwiY2xlYXIiLCJwdXNoIiwiZGF0YWJhc2VDb250cm9sbGVyIiwiZGVsZXRlRXZlcnl0aGluZyIsImRhdGFiYXNlQWRhcHRlciIsIlNjaGVtYUNhY2hlIiwiZGVsZXRlQWxsQ2xhc3NlcyIsInJlc29sdmluZ1Byb21pc2UiLCJyZXMiLCJyZWoiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNsZWVwIiwibXMiLCJzZXRUaW1lb3V0IiwiZ2V0Q29ubmVjdGlvbnNDb3VudCIsInNlcnZlciIsImdldENvbm5lY3Rpb25zIiwiZXJyIiwiY291bnQiLCJDb25uZWN0aW9ucyIsImNvbnN0cnVjdG9yIiwic29ja2V0cyIsIlNldCIsInRyYWNrIiwib24iLCJzb2NrZXQiLCJhZGQiLCJkZWxldGUiLCJkZXN0cm95QWxsIiwidmFsdWVzIiwiZGVzdHJveSIsInNpemUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL1Rlc3RVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwQ2FjaGUgZnJvbSAnLi9jYWNoZSc7XG5pbXBvcnQgU2NoZW1hQ2FjaGUgZnJvbSAnLi9BZGFwdGVycy9DYWNoZS9TY2hlbWFDYWNoZSc7XG5cbi8qKlxuICogRGVzdHJveXMgYWxsIGRhdGEgaW4gdGhlIGRhdGFiYXNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZhc3Qgc2V0IHRvIHRydWUgaWYgaXQncyBvayB0byBqdXN0IGRyb3Agb2JqZWN0cyBhbmQgbm90IGluZGV4ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95QWxsRGF0YVBlcm1hbmVudGx5KGZhc3QpIHtcbiAgaWYgKCFwcm9jZXNzLmVudi5URVNUSU5HKSB7XG4gICAgdGhyb3cgJ09ubHkgc3VwcG9ydGVkIGluIHRlc3QgZW52aXJvbm1lbnQnO1xuICB9XG4gIHJldHVybiBQcm9taXNlLmFsbChcbiAgICBPYmplY3Qua2V5cyhBcHBDYWNoZS5jYWNoZSkubWFwKGFwcElkID0+IHtcbiAgICAgIGNvbnN0IGFwcCA9IEFwcENhY2hlLmdldChhcHBJZCk7XG4gICAgICBjb25zdCBkZWxldGVQcm9taXNlcyA9IFtdO1xuICAgICAgaWYgKGFwcC5jYWNoZUFkYXB0ZXIgJiYgYXBwLmNhY2hlQWRhcHRlci5jbGVhcikge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGFwcC5jYWNoZUFkYXB0ZXIuY2xlYXIoKSk7XG4gICAgICB9XG4gICAgICBpZiAoYXBwLmRhdGFiYXNlQ29udHJvbGxlcikge1xuICAgICAgICBkZWxldGVQcm9taXNlcy5wdXNoKGFwcC5kYXRhYmFzZUNvbnRyb2xsZXIuZGVsZXRlRXZlcnl0aGluZyhmYXN0KSk7XG4gICAgICB9IGVsc2UgaWYgKGFwcC5kYXRhYmFzZUFkYXB0ZXIpIHtcbiAgICAgICAgU2NoZW1hQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgZGVsZXRlUHJvbWlzZXMucHVzaChhcHAuZGF0YWJhc2VBZGFwdGVyLmRlbGV0ZUFsbENsYXNzZXMoZmFzdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGRlbGV0ZVByb21pc2VzKTtcbiAgICB9KVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2aW5nUHJvbWlzZSgpIHtcbiAgbGV0IHJlcztcbiAgbGV0IHJlajtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXMgPSByZXNvbHZlO1xuICAgIHJlaiA9IHJlamVjdDtcbiAgfSk7XG4gIHByb21pc2UucmVzb2x2ZSA9IHJlcztcbiAgcHJvbWlzZS5yZWplY3QgPSByZWo7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25uZWN0aW9uc0NvdW50KHNlcnZlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHNlcnZlci5nZXRDb25uZWN0aW9ucygoZXJyLCBjb3VudCkgPT4ge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGNvdW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbnMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNvY2tldHMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICB0cmFjayhzZXJ2ZXIpIHtcbiAgICBzZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCBzb2NrZXQgPT4ge1xuICAgICAgdGhpcy5zb2NrZXRzLmFkZChzb2NrZXQpO1xuICAgICAgc29ja2V0Lm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5zb2NrZXRzLmRlbGV0ZShzb2NrZXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95QWxsKCkge1xuICAgIGZvciAoY29uc3Qgc29ja2V0IG9mIHRoaXMuc29ja2V0cy52YWx1ZXMoKSkge1xuICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zb2NrZXRzLmNsZWFyKCk7XG4gIH1c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
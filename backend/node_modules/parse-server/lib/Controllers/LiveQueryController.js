"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LiveQueryController = void 0;
var _ParseCloudCodePublisher = require("../LiveQuery/ParseCloudCodePublisher");
var _Options = require("../Options");
var _triggers = require("./../triggers");
class LiveQueryController {
  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      const classNames = config.classNames.map(name => {
        const _name = (0, _triggers.getClassName)(name);
        return new RegExp(`^${_name}$`);
      });
      this.classNames = new Set(classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }
    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }
  connect() {
    return this.liveQueryPublisher.connect();
  }
  onAfterSave(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);
    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }
  onAfterDelete(className, currentObject, originalObject, classLevelPermissions) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject, classLevelPermissions);
    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }
  hasLiveQuery(className) {
    for (const name of this.classNames) {
      if (name.test(className)) {
        return true;
      }
    }
    return false;
  }
  clearCachedRoles(user) {
    if (!user) {
      return;
    }
    return this.liveQueryPublisher.onClearCachedRoles(user);
  }
  _makePublisherRequest(currentObject, originalObject, classLevelPermissions) {
    const req = {
      object: currentObject
    };
    if (currentObject) {
      req.original = originalObject;
    }
    if (classLevelPermissions) {
      req.classLevelPermissions = classLevelPermissions;
    }
    return req;
  }
}
exports.LiveQueryController = LiveQueryController;
var _default = exports.default = LiveQueryController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIiLCJyZXF1aXJlIiwiX09wdGlvbnMiLCJfdHJpZ2dlcnMiLCJMaXZlUXVlcnlDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJjbGFzc05hbWVzIiwiU2V0IiwiQXJyYXkiLCJtYXAiLCJuYW1lIiwiX25hbWUiLCJnZXRDbGFzc05hbWUiLCJSZWdFeHAiLCJsaXZlUXVlcnlQdWJsaXNoZXIiLCJQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciIsImNvbm5lY3QiLCJvbkFmdGVyU2F2ZSIsImNsYXNzTmFtZSIsImN1cnJlbnRPYmplY3QiLCJvcmlnaW5hbE9iamVjdCIsImNsYXNzTGV2ZWxQZXJtaXNzaW9ucyIsImhhc0xpdmVRdWVyeSIsInJlcSIsIl9tYWtlUHVibGlzaGVyUmVxdWVzdCIsIm9uQ2xvdWRDb2RlQWZ0ZXJTYXZlIiwib25BZnRlckRlbGV0ZSIsIm9uQ2xvdWRDb2RlQWZ0ZXJEZWxldGUiLCJ0ZXN0IiwiY2xlYXJDYWNoZWRSb2xlcyIsInVzZXIiLCJvbkNsZWFyQ2FjaGVkUm9sZXMiLCJvYmplY3QiLCJvcmlnaW5hbCIsImV4cG9ydHMiLCJfZGVmYXVsdCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvQ29udHJvbGxlcnMvTGl2ZVF1ZXJ5Q29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciB9IGZyb20gJy4uL0xpdmVRdWVyeS9QYXJzZUNsb3VkQ29kZVB1Ymxpc2hlcic7XG5pbXBvcnQgeyBMaXZlUXVlcnlPcHRpb25zIH0gZnJvbSAnLi4vT3B0aW9ucyc7XG5pbXBvcnQgeyBnZXRDbGFzc05hbWUgfSBmcm9tICcuLy4uL3RyaWdnZXJzJztcbmV4cG9ydCBjbGFzcyBMaXZlUXVlcnlDb250cm9sbGVyIHtcbiAgY2xhc3NOYW1lczogYW55O1xuICBsaXZlUXVlcnlQdWJsaXNoZXI6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6ID9MaXZlUXVlcnlPcHRpb25zKSB7XG4gICAgLy8gSWYgY29uZmlnIGlzIGVtcHR5LCB3ZSBqdXN0IGFzc3VtZSBubyBjbGFzc3MgbmVlZHMgdG8gYmUgcmVnaXN0ZXJlZCBhcyBMaXZlUXVlcnlcbiAgICBpZiAoIWNvbmZpZyB8fCAhY29uZmlnLmNsYXNzTmFtZXMpIHtcbiAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5jbGFzc05hbWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBjb25maWcuY2xhc3NOYW1lcy5tYXAobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IF9uYW1lID0gZ2V0Q2xhc3NOYW1lKG5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7X25hbWV9JGApO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNsYXNzTmFtZXMgPSBuZXcgU2V0KGNsYXNzTmFtZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnbGl2ZVF1ZXJ5LmNsYXNzZXMgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZyc7XG4gICAgfVxuICAgIHRoaXMubGl2ZVF1ZXJ5UHVibGlzaGVyID0gbmV3IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyKGNvbmZpZyk7XG4gIH1cblxuICBjb25uZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5jb25uZWN0KCk7XG4gIH1cblxuICBvbkFmdGVyU2F2ZShcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBjdXJyZW50T2JqZWN0OiBhbnksXG4gICAgb3JpZ2luYWxPYmplY3Q6IGFueSxcbiAgICBjbGFzc0xldmVsUGVybWlzc2lvbnM6ID9hbnlcbiAgKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpdmVRdWVyeShjbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IHRoaXMuX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3QsIG9yaWdpbmFsT2JqZWN0LCBjbGFzc0xldmVsUGVybWlzc2lvbnMpO1xuICAgIHRoaXMubGl2ZVF1ZXJ5UHVibGlzaGVyLm9uQ2xvdWRDb2RlQWZ0ZXJTYXZlKHJlcSk7XG4gIH1cblxuICBvbkFmdGVyRGVsZXRlKFxuICAgIGNsYXNzTmFtZTogc3RyaW5nLFxuICAgIGN1cnJlbnRPYmplY3Q6IGFueSxcbiAgICBvcmlnaW5hbE9iamVjdDogYW55LFxuICAgIGNsYXNzTGV2ZWxQZXJtaXNzaW9uczogYW55XG4gICkge1xuICAgIGlmICghdGhpcy5oYXNMaXZlUXVlcnkoY2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXEgPSB0aGlzLl9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0LCBvcmlnaW5hbE9iamVjdCwgY2xhc3NMZXZlbFBlcm1pc3Npb25zKTtcbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsb3VkQ29kZUFmdGVyRGVsZXRlKHJlcSk7XG4gIH1cblxuICBoYXNMaXZlUXVlcnkoY2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5jbGFzc05hbWVzKSB7XG4gICAgICBpZiAobmFtZS50ZXN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNsZWFyQ2FjaGVkUm9sZXModXNlcjogYW55KSB7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsZWFyQ2FjaGVkUm9sZXModXNlcik7XG4gIH1cblxuICBfbWFrZVB1Ymxpc2hlclJlcXVlc3QoY3VycmVudE9iamVjdDogYW55LCBvcmlnaW5hbE9iamVjdDogYW55LCBjbGFzc0xldmVsUGVybWlzc2lvbnM6ID9hbnkpOiBhbnkge1xuICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgIG9iamVjdDogY3VycmVudE9iamVjdCxcbiAgICB9O1xuICAgIGlmIChjdXJyZW50T2JqZWN0KSB7XG4gICAgICByZXEub3JpZ2luYWwgPSBvcmlnaW5hbE9iamVjdDtcbiAgICB9XG4gICAgaWYgKGNsYXNzTGV2ZWxQZXJtaXNzaW9ucykge1xuICAgICAgcmVxLmNsYXNzTGV2ZWxQZXJtaXNzaW9ucyA9IGNsYXNzTGV2ZWxQZXJtaXNzaW9ucztcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaXZlUXVlcnlDb250cm9sbGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSx3QkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBO0FBQ08sTUFBTUcsbUJBQW1CLENBQUM7RUFJL0JDLFdBQVdBLENBQUNDLE1BQXlCLEVBQUU7SUFDckM7SUFDQSxJQUFJLENBQUNBLE1BQU0sSUFBSSxDQUFDQSxNQUFNLENBQUNDLFVBQVUsRUFBRTtNQUNqQyxJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDLE1BQU0sSUFBSUYsTUFBTSxDQUFDQyxVQUFVLFlBQVlFLEtBQUssRUFBRTtNQUM3QyxNQUFNRixVQUFVLEdBQUdELE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRyxHQUFHLENBQUNDLElBQUksSUFBSTtRQUMvQyxNQUFNQyxLQUFLLEdBQUcsSUFBQUMsc0JBQVksRUFBQ0YsSUFBSSxDQUFDO1FBQ2hDLE9BQU8sSUFBSUcsTUFBTSxDQUFDLElBQUlGLEtBQUssR0FBRyxDQUFDO01BQ2pDLENBQUMsQ0FBQztNQUNGLElBQUksQ0FBQ0wsVUFBVSxHQUFHLElBQUlDLEdBQUcsQ0FBQ0QsVUFBVSxDQUFDO0lBQ3ZDLENBQUMsTUFBTTtNQUNMLE1BQU0sZ0RBQWdEO0lBQ3hEO0lBQ0EsSUFBSSxDQUFDUSxrQkFBa0IsR0FBRyxJQUFJQyxnREFBdUIsQ0FBQ1YsTUFBTSxDQUFDO0VBQy9EO0VBRUFXLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDRixrQkFBa0IsQ0FBQ0UsT0FBTyxDQUFDLENBQUM7RUFDMUM7RUFFQUMsV0FBV0EsQ0FDVEMsU0FBaUIsRUFDakJDLGFBQWtCLEVBQ2xCQyxjQUFtQixFQUNuQkMscUJBQTJCLEVBQzNCO0lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxDQUFDSixTQUFTLENBQUMsRUFBRTtNQUNqQztJQUNGO0lBQ0EsTUFBTUssR0FBRyxHQUFHLElBQUksQ0FBQ0MscUJBQXFCLENBQUNMLGFBQWEsRUFBRUMsY0FBYyxFQUFFQyxxQkFBcUIsQ0FBQztJQUM1RixJQUFJLENBQUNQLGtCQUFrQixDQUFDVyxvQkFBb0IsQ0FBQ0YsR0FBRyxDQUFDO0VBQ25EO0VBRUFHLGFBQWFBLENBQ1hSLFNBQWlCLEVBQ2pCQyxhQUFrQixFQUNsQkMsY0FBbUIsRUFDbkJDLHFCQUEwQixFQUMxQjtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0osU0FBUyxDQUFDLEVBQUU7TUFDakM7SUFDRjtJQUNBLE1BQU1LLEdBQUcsR0FBRyxJQUFJLENBQUNDLHFCQUFxQixDQUFDTCxhQUFhLEVBQUVDLGNBQWMsRUFBRUMscUJBQXFCLENBQUM7SUFDNUYsSUFBSSxDQUFDUCxrQkFBa0IsQ0FBQ2Esc0JBQXNCLENBQUNKLEdBQUcsQ0FBQztFQUNyRDtFQUVBRCxZQUFZQSxDQUFDSixTQUFpQixFQUFXO0lBQ3ZDLEtBQUssTUFBTVIsSUFBSSxJQUFJLElBQUksQ0FBQ0osVUFBVSxFQUFFO01BQ2xDLElBQUlJLElBQUksQ0FBQ2tCLElBQUksQ0FBQ1YsU0FBUyxDQUFDLEVBQUU7UUFDeEIsT0FBTyxJQUFJO01BQ2I7SUFDRjtJQUNBLE9BQU8sS0FBSztFQUNkO0VBRUFXLGdCQUFnQkEsQ0FBQ0MsSUFBUyxFQUFFO0lBQzFCLElBQUksQ0FBQ0EsSUFBSSxFQUFFO01BQ1Q7SUFDRjtJQUNBLE9BQU8sSUFBSSxDQUFDaEIsa0JBQWtCLENBQUNpQixrQkFBa0IsQ0FBQ0QsSUFBSSxDQUFDO0VBQ3pEO0VBRUFOLHFCQUFxQkEsQ0FBQ0wsYUFBa0IsRUFBRUMsY0FBbUIsRUFBRUMscUJBQTJCLEVBQU87SUFDL0YsTUFBTUUsR0FBRyxHQUFHO01BQ1ZTLE1BQU0sRUFBRWI7SUFDVixDQUFDO0lBQ0QsSUFBSUEsYUFBYSxFQUFFO01BQ2pCSSxHQUFHLENBQUNVLFFBQVEsR0FBR2IsY0FBYztJQUMvQjtJQUNBLElBQUlDLHFCQUFxQixFQUFFO01BQ3pCRSxHQUFHLENBQUNGLHFCQUFxQixHQUFHQSxxQkFBcUI7SUFDbkQ7SUFDQSxPQUFPRSxHQUFHO0VBQ1o7QUFDRjtBQUFDVyxPQUFBLENBQUEvQixtQkFBQSxHQUFBQSxtQkFBQTtBQUFBLElBQUFnQyxRQUFBLEdBQUFELE9BQUEsQ0FBQUUsT0FBQSxHQUVjakMsbUJBQW1CIiwiaWdub3JlTGlzdCI6W119